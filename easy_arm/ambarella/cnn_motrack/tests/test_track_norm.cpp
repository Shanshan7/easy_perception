#include <iostream>
#include "trajectory_norm.h"


int main()
{
    int rval = 0;

    NormTrajectory norm_trajectory;
    std::vector<std::vector<float>> position_value;
    std::vector<std::vector<float>> position_value_slide;
    std::vector <float> x1 = {833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833., \
                            833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833., \
                            833.,  833.,  833.,  833.,  834.,  834.,  834.,  834.,  834.,  834.,  832.,  832., \
                            832.,  832.,  833.,  833.,  833.,  833.,  834.,  834.,  833.,  833.,  833.,  833., \
                            833.,  833.,  834.,  834.,  834.,  834.,  833.,  833.,  833.,  833.,  834.,  834., \
                            834.,  834.,  834.,  834.,  835.,  835.,  835.,  835.,  835.,  835.,  834.,  834., \
                            835.,  835.,  835.,  835.,  834.,  834.,  834.,  834.,  835.,  835.,  835.,  835., \
                            834.,  834.,  834.};
    position_value.push_back(x1);
    std::vector <float> x2 = {1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031.,
                            1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031.,
                            1031., 1031., 1032., 1032., 1031., 1031., 1031., 1031., 1031., 1031., 1032., 1032.,
                            1033., 1033., 1031., 1031., 1032., 1032., 1031., 1031., 1031., 1031., 1032., 1032.,
                            1033., 1033., 1032., 1032., 1030., 1030., 1031., 1031., 1032., 1032., 1032., 1032.,
                            1033., 1033., 1033., 1033., 1031., 1031., 1030., 1030., 1030., 1030., 1031., 1031.,
                            1031., 1031., 1030., 1030., 1031., 1031., 1032., 1032., 1031., 1031., 1030., 1030.,
                            1031., 1031., 1031.};
    position_value.push_back(x2);
    std::vector <float> y1 = {259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,
                            259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,
                            259.,  259.,  259.,  259.,  259.,  259.,  258.,  258.,  258.,  258.,  257.,  257.,
                            257.,  257.,  257.,  257.,  257.,  257.,  257.,  257.,  257.,  257.,  258.,  258.,
                            258.,  258.,  258.,  258.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,
                            259.,  259.,  259.,  259.,  259.,  259.,  260.,  260.,  259.,  259.,  259.,  259.,
                            259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,  259.,
                            260.,  260.,  260.};
    position_value.push_back(y1);
    std::vector <float> y2 = {547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,
                            547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,  547.,
                            547.,  547.,  546.,  546.,  546.,  546.,  549.,  549.,  550.,  550.,  549.,  549.,
                            547.,  547.,  548.,  548.,  547.,  547.,  547.,  547.,  547.,  547.,  546.,  546.,
                            543.,  543.,  542.,  542.,  543.,  543.,  543.,  543.,  541.,  541.,  539.,  539.,
                            538.,  538.,  536.,  536.,  537.,  537.,  538.,  538.,  540.,  540.,  539.,  539.,
                            540.,  540.,  542.,  542.,  542.,  542.,  540.,  540.,  539.,  539.,  541.,  541.,
                            540.,  540.,  540.};
    position_value.push_back(y2);   


    // std::vector <float> x1 = {833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833., \
    //                         833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833.,  833., \
    //                         833.,  833.,  833.,  833.,  834.,  834.};
    // position_value.push_back(x1);
    // std::vector <float> x2 = {1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031.,
    //                         1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031., 1031.,
    //                         1031., 1031., 1032., 1032., 1031., 1031.};
    // position_value.push_back(x2); 

    int image_width = 2560;
    norm_trajectory.trajectory_smoothing(position_value, position_value_slide, image_width);
    std::cout << "   +++ " << position_value_slide[0].size() << std::endl;

    for (int i = 0; i < position_value_slide.size(); i++)
    {
        for (int j = 0; j < position_value_slide[0].size(); j++)
        {
            std::cout << " " << position_value_slide[i][j] << ", ";
        }
        std::cout << std::endl;
    }

    // std::vector<float> input = {0.325391,0.325391,0.325391,0.325781,0.325781};
    // float kernel[] = {25, 16, 9, 4, 1};

    // int input_length = input.size(); // sizeof(input) / sizeof(float);
    // int kernel_size = sizeof(kernel) / sizeof(float);

    // int output_length = input_length + kernel_size - 1;
    // float output[output_length];
    // memset(output, 0, sizeof(output)); //注意一定要清零

    // conv1d(input, kernel, input_length, kernel_size, output);
    // int sum_kernel = std::accumulate(kernel, kernel + kernel_size, 0);
    // for (int k = 0; k < output_length; k++)
    // {
    //     output[k] = output[k] / (float)sum_kernel;
    // }

    // float aaa = input[0] * kernel[4] + input[1] * kernel[3] + input[2] * kernel[2] + input[3] * kernel[1] + \
    // input[4] * kernel[0];
    // std::cout << "aaaaaaaaaaaaaaaaaa: " << aaa / 55 << std::endl;

    // std::cout << output[4] << std::endl;
    
    return rval;
}